import graypy
import logging

graylog_server = "{{pritunl_plugins | selectattr("name","equalto","graylog") | map(attribute='server') | join }}"
graylog_port = {{pritunl_plugins | selectattr("name","equalto","graylog") | map(attribute='port') | join }}

class OpsLogging(object):
    """Ops Logger - An Logging subsystem """
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)
        self.handler = None
        self.logger_adapter = None

    def setup(self, server, port):
        if not server or not port:
            return False

        self.handler = graypy.GELFHandler(server,
                                          port,
                                          debugging_fields=False)

        self.logger.addHandler(self.handler)

    def _print_dict(self, msg_string, msg_dict):
        """Send dict to graylog (custom field)."""
        self.logger_adapter = logging.LoggerAdapter(self.logger, msg_dict)
        self.logger_adapter.info(msg_string,msg_dict)

logger = OpsLogging()
logger.setup(graylog_server,graylog_port)

# Called on authorization of user connection attempt. Allow will be True
# when user authenticated sucessfully. When allow is False reason will
# explain why the user was not authenticated.
def user_connection(host_id, server_id, org_id, user_id, host_name,
        server_name, org_name, user_name, platform, device_id, device_name,
        remote_ip, mac_addr, password, allow, reason, **kwargs):

    if not allow:
        short_message = "["+ server_name +"] User "+ user_name +" attempted to make an unauthorized connection"
        fields = {'pritunl_'+k: v for k,v in locals().items()}
        logger._print_dict(short_message,fields)

    pass

# Called after user has connected.
def user_connected(host_id, server_id, org_id, user_id, host_name,
        server_name, org_name, user_name, platform, device_id, device_name,
        virtual_ip, virtual_ip6, remote_ip, mac_addr, **kwargs):

    short_message = "["+ server_name +"] User "+ user_name +" connected"
    fields = {'pritunl_'+k: v for k,v in locals().items()}
    logger._print_dict(short_message,fields)

    pass

# Called on user disconnect, may not always be called if a server is stopped
# or unexpected failure occurs.
def user_disconnected(host_id, server_id, org_id, user_id, host_name,
        server_name, org_name, user_name, remote_ip, **kwargs):

    short_message = "["+ server_name +"] User "+ user_name +" disconnected"
    fields = {'pritunl_'+k: v for k,v in locals().items()}
    logger._print_dict(short_message,fields)

    pass

# [SYNCHRONOUS] Called when a server is started. Call occurs after OpenVPN
# process has been configured and started.
def server_start(host_id, host_name, server_id, server_name, port, protocol,
        ipv6, ipv6_firewall, network, network6, network_mode, network_start,
        network_stop, restrict_routes, bind_address, onc_hostname,
        dh_param_bits, multi_device, dns_servers, search_domain, otp_auth,
        cipher, hash, inter_client, ping_interval, ping_timeout,
        link_ping_interval, link_ping_timeout, max_clients, replica_count,
        dns_mapping, debug, interface, bridge_interface, vxlan, **kwargs):

    short_message = "["+ server_name +"] Starting server"
    fields = {'pritunl_'+k: v for k,v in locals().items()}
    logger._print_dict(short_message,fields)

    pass

# [SYNCHRONOUS] Called when a server is stopped.
def server_stop(host_id, host_name, server_id, server_name, port, protocol,
        ipv6, ipv6_firewall, network, network6, network_mode, network_start,
        network_stop, restrict_routes, bind_address, onc_hostname,
        dh_param_bits, multi_device, dns_servers, search_domain, otp_auth,
        cipher, hash, inter_client, ping_interval, ping_timeout,
        link_ping_interval, link_ping_timeout, max_clients, replica_count,
        dns_mapping, debug, interface, bridge_interface, vxlan, **kwargs):

    short_message = "["+ server_name +"] Stopping server"
    fields = {'pritunl_'+k: v for k,v in locals().items()}
    logger._print_dict(short_message,fields)

    pass

# [SYNCHRONOUS] Called after a user has authenticated with SSO when
# loging into the web console. Must return True or False to accept auth
# request and an organization name or None. If an organization name is
# included the user will be added to that organization. If Duo is used as a
# secondary authentication method and the organization name from Duo is set it
# will have priority over the organization name from the primary SSO provider.
# The sso_org_names will specify the list of org names provided by SAML and
# Slack single sign-on.
def sso_authenticate(sso_type, host_id, host_name, user_name, user_email,
        remote_ip, sso_org_names, sso_group_names, **kwargs):

    fields = {'pritunl_'+k: v for k,v in locals().items()}

    if 'auth_ok':
        short_message = "["+ host_name +"] User "+ user_name +" successfully signed in through "+ sso_type +" SSO"
        logger._print_dict(short_message,fields)

        return True, '', []

    else:
        short_message = "["+ host_name +"] User "+ user_name +" failed to sign in through "+ sso_type +" SSO"
        logger._print_dict(short_message,fields)

        return False, None, None
